pipeline {
    agent any
    tools {
        maven 'mvn'
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('filRouge')
        SONAR_TOKEN = 'squ_e99fc38bde67460695de4fd28c4c86be5f941bf7'
        SONARQUBE_SERVER = 'http://localhost:9100'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/IlhamElkasm/File-Rouge.git'
            }
        }
        stage('Build & Test filRouge') {
            steps {
                dir('DreamCakes') {
                    withMaven(maven: 'mvn') {
                        bat 'mvn clean install'
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube'
                    dir('DreamCakes') {
                        bat "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=DreamCakes -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONAR_TOKEN} -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }
       stage('Build Docker Image & Push') {
           steps {
               dir('DreamCakes') {
                   script {
                       try {
                           bat 'docker context use default'

                           withCredentials([usernamePassword(credentialsId: 'filRouge', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                               bat "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                           }

                           def imageTag = env.TAG_VERSION ?: 'latest'
                           def dockerImage = docker.build("ilhaamm/filrouge:${imageTag}")

                           docker.withRegistry('https://index.docker.io/v1/', 'filRouge') {
                               dockerImage.push()
                           }
                       } catch (Exception e) {
                           error "Ã‰chec de la construction ou du push Docker : ${e.message}"
                       }
                   }
               }
           }
       }

        stage('Deploy with Docker Compose') {
            steps {
                dir('DreamCakes')  {
                    bat 'docker-compose up -d'
                }
            }
        }
    }
}
